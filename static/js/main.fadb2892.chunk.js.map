{"version":3,"sources":["components/NavBar/NavBar.js","components/ImagesApi/ImagesApi.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","React","Component","ItemCard","name","ItemList","pokemon","map","poke","i","ImagesApi_ItemCard","key","toUpperCase","ImagesApi","_this","state","pokeData","isLoading","error","getData","bind","assertThisInitialized","url","_this2","fetch","then","response","json","setState","results","catch","console","log","Fragment","ImagesApi_ItemList","App","HashRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySA2BeA,qBAvBX,SAAAA,EAAYC,GAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACTH,uHAQN,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,0BAjBCC,IAAMC,mBCIrBC,EAAW,SAAAb,GAAK,OACpBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,UAAMT,EAAMc,QAITC,EAAW,SAAAf,GAAK,OACpBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZV,EAAMgB,QAAQC,IAAI,SAACC,EAAMC,GAAP,OACnBZ,EAAAC,EAAAC,cAACW,EAAD,CAAUC,IAAKF,EAAGL,KAAMI,EAAKJ,KAAKQ,oBAwCvBC,cAlCd,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAvB,OAAAC,EAAA,EAAAD,CAAAE,KAAAoB,IAClBC,EAAAvB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsB,GAAAjB,KAAAH,KAAMH,KACDyB,MAAQ,CACZC,SAAU,GACVC,WAAW,EACXC,MAAO,MAERJ,EAAKK,QAAUL,EAAKK,QAAQC,KAAb7B,OAAA8B,EAAA,EAAA9B,CAAAuB,IAPGA,uEAUXQ,GAAK,IAAAC,EAAA9B,KACZ+B,MAAMF,GACLG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIJ,EAAKK,SAClB,CAAEZ,SAAUW,EAAKE,QAChBZ,WAAW,MAEZa,MAAM,SAAAZ,GAAK,OAAIK,EAAKK,SAAS,CAAEV,QAAOD,WAAW,kDAIlDc,QAAQC,IAAI,UACZvC,KAAK0B,QAvCK,+EA2CV,OACCtB,EAAAC,EAAAC,cAACF,EAAAC,EAAMmC,SAAP,KACCpC,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAACmC,EAAD,CAAU5B,QAASb,KAAKsB,MAAMC,mBA9BVf,IAAMC,WCDfiC,MAZf,WACE,OACEtC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACIvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnD,IACjCQ,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAW3B,OCDhC4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.fadb2892.chunk.js","sourcesContent":["import React from \"react\"\nimport './index.css'\n\nclass NavBar extends React.Component{\n    constructor(props){\n        super(props)\n    }\n\n    componentDidMount() {\n\n    }\n\n    render(){\n        return(\n            <div className=\"nav-wrapper\">\n                <div className=\"nav-item-wrapper container\">\n                    <div className=\"nav-item\">About</div>\n                    <div className=\"nav-item\">Background</div>\n                    <div className=\"nav-item\">Skills</div>\n                    <div className=\"nav-item\">Experience</div>\n                    <div className=\"nav-item\">Qualification</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NavBar","// https://www.robinwieruch.de/react-fetching-data/\n\n// helpful tutorial async/fetch with Hooks: \n// https://www.youtube.com/watch?time_continue=8&v=R3WPjVm5t5k\nimport React from \"react\"\nconst URL = \"https://pokeapi.co/api/v2/pokemon?limit=10\";\n\nconst ItemCard = props => (\n\t\t<div className=\"item-card\">\n\t\t\t<h5>{ props.name }</h5>\n\t\t</div>\n\t);\n\nconst ItemList = props => (\n\t\t<div className=\"item-list\">\n\t\t\t{ props.pokemon.map((poke, i) => (\n\t\t\t\t<ItemCard key={i} name={poke.name.toUpperCase()} />\n\t\t\t))}\n\t\t</div>\n\t)\n\nclass ImagesApi extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tpokeData: [],\n\t\t\tisLoading: false,\n\t\t\terror: null\n\t\t}\n\t\tthis.getData = this.getData.bind(this);\n\t}\n\t\n\tgetData(url) {\n\t\tfetch(url)\n\t\t.then(response => response.json())\n\t\t.then(json => this.setState(\n\t\t\t{ pokeData: json.results,\n\t\t\t isLoading: false }\n\t\t))\n\t\t.catch(error => this.setState({ error, isLoading: false }));\n\t}\n\t\n  componentDidMount() {\n\t\tconsole.log('Hello!')\n\t\tthis.getData(URL);\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<h1>Just a Few Pok&eacute;mon with React Classes!</h1>\n\t\t\t\t<ItemList pokemon={this.state.pokeData} />\n\t\t\t</React.Fragment>\n\t)}\n} \n\nexport default ImagesApi","import React from 'react';\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './components/NavBar/NavBar'\nimport NavBar from './components/NavBar/NavBar';\nimport ImagesApi from './components/ImagesApi/ImagesApi';\n\nfunction App() {\n  return (\n    <main>\n      <HashRouter>\n          <Route exact path=\"/\" component={NavBar} />\n          <Route exact path=\"/ImagesApi\" component={ImagesApi} />\n      </HashRouter>\n       \n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}